// Generated by LiveScript 1.3.1
var ldPage, slice$ = [].slice;
ldPage = function(opt){
  var that;
  opt == null && (opt = {});
  if (opt.fetch) {
    this._fetch = opt.fetch;
    delete opt.fetch;
  }
  this.evtHandler = {};
  this.data = {};
  this.handle = {};
  this.offset = 0;
  this.running = false;
  this.end = false;
  this.opt = import$({
    boundary: 0,
    limit: 20,
    scrollDelay: 100,
    fetchDelay: 200,
    fetchOnScroll: false
  }, opt);
  this.limit = this.opt.limit;
  if (that = this.opt.host) {
    this.setHost(that);
  }
  return this;
};
ldPage.prototype = import$(Object.create(Object.prototype), {
  _fetch: function(){
    return new Promise(function(res, rej){
      return res({
        payload: []
      });
    });
  },
  on: function(n, cb){
    var ref$;
    return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
  },
  fire: function(n){
    var v, i$, ref$, len$, cb, results$ = [];
    v = slice$.call(arguments, 1);
    for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      results$.push(cb.apply(this, v));
    }
    return results$;
  },
  init: function(opt){
    var k, ref$, v;
    opt == null && (opt = {});
    for (k in ref$ = this.handle) {
      v = ref$[k];
      clearTimeout(v);
    }
    this.offset = 0;
    this.end = false;
    if (opt.data) {
      return this.data = opt.data;
    }
  },
  isEnd: function(){
    return this.end;
  },
  setHost: function(host){
    var f, update, this$ = this;
    if (!host || (host === window || host === document || host === document.body)) {
      host = document.scrollingElement;
    }
    f = function(e){
      return this$.onScroll(e);
    };
    if (this.host) {
      this.host.removeEventListener('scroll', f);
    }
    this.host = typeof host === 'string' ? document.querySelector(host) : host;
    if (!this.host) {
      this.host = null;
      return;
    }
    if (this.opt.fetchOnScroll && !this.opt.pivot) {
      return this.host.addEventListener('scroll', f);
    }
    if (this.obs) {
      this.obs.unobserve(this.opt.pivot);
    }
    update = function(ns){
      if (!(ns.map(function(it){
        return it.isIntersecting;
      }).filter(function(it){
        return it;
      }).length && !(this$.end || this$.running))) {
        return;
      }
      return this$.fetch().then(function(it){
        return this$.fire('scroll.fetch', it);
      });
    };
    this.obs = new IntersectionObserver(update, {});
    return this.obs.observe(this.opt.pivot);
  },
  onScroll: function(){
    var this$ = this;
    if (this.running || this.end) {
      return;
    }
    clearTimeout(this.handle.scroll);
    return this.handle.scroll = setTimeout(function(){
      if (this$.host.scrollHeight - this$.host.scrollTop - this$.host.clientHeight > this$.opt.boundary) {
        return;
      }
      if (!this$.end && !this$.running) {
        return this$.fetch().then(function(it){
          return this$.fire('scroll.fetch', it);
        });
      }
    }, this.opt.scrollDelay);
  },
  setLoader: function(){},
  parseResult: function(it){
    return it;
  },
  fetch: function(opt){
    var this$ = this;
    opt == null && (opt = {});
    return new Promise(function(res, rej){
      if (this$.running || this$.end) {
        return res([]);
      }
      if (this$.handle.fetch) {
        clearTimeout(this$.handle.fetch);
      }
      return this$.handle.fetch = setTimeout(function(){
        this$.running = true;
        return this$._fetch().then(function(ret){
          ret == null && (ret = []);
          ret = this$.parseResult(ret);
          this$.running = false;
          this$.offset += ret.length || 0;
          if (!ret.length) {
            this$.fire(!this$.offset ? 'empty' : 'finish');
            this$.end = true;
          }
          return res(ret);
        });
      }, opt.delay || this$.opt.fetchDelay || 200);
    });
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
